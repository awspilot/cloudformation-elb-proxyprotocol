AWSTemplateFormatVersion: 2010-09-09
Parameters:
    S3DeployBucketName:
        Type: String
        Description: S3 Bucket where Awspilot will put the deployment .zip files Ex. YOURORG-deployments
    IAMUser:
        Type: String
        Default: awspilot
        Description: IAM user in your aws account that will have access to put zip files into S3DeployBucketName s3 bucket

    AwspilotUsername:
        Type: String
        Default: you@yourcompany
        Description: Desired username in the awspilot.com website ( email address )
    AwspilotPassword:
        Type: String
        Description: Password for your awspilot.com account

    GithubToken:
        Type: String
        Description: Oauth or Personal Access Token, get one here https://github.com/settings/tokens

    GithubRepositoryName:
        Type: String
        Description: user/repository or org/repository
Resources:
    DeploymentBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Ref S3DeployBucketName

    AwspilotIamUser:
      Type: AWS::IAM::User
      Properties:
        Path: /
        UserName: !Ref IAMUser
        Policies:
        - PolicyName: s3deplymentbucketaccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
               - Effect: Allow
                 Sid: AccessToPutDeployZip
                 Action:
                   - S3:*
                 Resource: !Sub
                    - arn:aws:s3:::${deploybucket}/*
                    - { deploybucket: !Ref S3DeployBucketName }

    AwspilotIamUserKey:
        Type: AWS::IAM::AccessKey
        Properties:
            UserName: !Ref AwspilotIamUser


    AwspilotLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                - Effect: Allow
                  Principal: {Service: [lambda.amazonaws.com]}
                  Action: ['sts:AssumeRole']
            Path: /
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"

    # to get a new version of custom-handler.zip, you need to delete and recreate this resource
    Awspilot:
        Type: AWS::Lambda::Function
        DependsOn: [ AwspilotLambdaRole ]
        Properties:
            FunctionName: awspilot
            MemorySize: 128
            Handler: index.handler
            Role: !GetAtt AwspilotLambdaRole.Arn
            Runtime: nodejs4.3
            Timeout: 300
            Code:
                S3Bucket: !Join [ '', [ 'awspilot-cf-', !Ref "AWS::Region" ]]
                S3Key: custom-handler.zip

    # create an account on awspilot.com website
    AwspilotAccount:
        Type: Custom::AwspilotAccount
        DependsOn: [ Awspilot ]
        Properties:
            ServiceToken: !GetAtt Awspilot.Arn
            Username: !Ref AwspilotUsername
            # updatable properties
            Password: !Ref AwspilotPassword

    # grant Awspilot access to github account so it can add hook and checkout the source
    GithubGrant:
        Type: Custom::AwspilotGithubToken
        DependsOn: [ Awspilot ]
        Properties:
            ServiceToken: !GetAtt Awspilot.Arn
            AccountKey: !GetAtt AwspilotAccount.AccessToken
            # updatable properties
            Name: AccessToGit
            Token: !Ref GithubToken






    # grant Awspilot access to put .zip file onto your s3
    AwspilotAWSGrant:
        Type: Custom::AwspilotAwsGrant
        DependsOn: [ Awspilot ]
        Properties:
            ServiceToken: !GetAtt Awspilot.Arn
            AccountKey: !GetAtt AwspilotAccount.AccessToken
            # updatable properties
            Name: AccessToAwsS3Put
            AwsAccessKeyId: !Ref AwspilotIamUserKey
            AwsSecretAccessKey: !GetAtt AwspilotIamUserKey.SecretAccessKey

    # github repository
    GithubRepository:
        Type: Custom::GithubRepositoryRef
        DependsOn: [ Awspilot ]
        Properties:
            ServiceToken: !GetAtt Awspilot.Arn
            GithubToken: !Ref GithubToken
            Name: !Ref GithubRepositoryName


    # github repository hook
    GithubRepositoryHook1:
        Type: Custom::GithubRepositoryHook
        DependsOn: [ Awspilot ]
        Properties:
            ServiceToken: !GetAtt Awspilot.Arn
            GithubToken: !Ref GithubToken
            RepositoryName: !Ref GithubRepositoryName
            Hook:
                Url: 'https://example.com/hook1'
                Active: true
                #ContentType: form
                ContentType: json


    # WORK IN PROGRESS

Outputs:
    RepoId:
        Description: Repository Id
        Value: !GetAtt GithubRepository.id
        Export:
            Name: RepoId
    AccountKey:
        Description: Awspilot Account Key
        Value: !GetAtt AwspilotAccount.AccessToken
        Export:
            Name: AwspilotAccountKey
