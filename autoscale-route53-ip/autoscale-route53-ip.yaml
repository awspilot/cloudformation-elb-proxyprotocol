AWSTemplateFormatVersion: 2010-09-09
Parameters:
    InstanceType:
        Type: String
        Default: t1.micro
        Description: Instance Type

    AMI:
        Type: String
        Description: Select AMI for your region https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html

    AutoscaleInstances:
        Type: Number
        Default: 2
        Description: Numer of instances in Autoscaling group


    Route53Zone:
        Type: String
        Default: 'XXXXXXXXXXXXX'
        Description: Find the coresponding zone id for 'mydomain.com'

    FQDN:
        Type: String
        Description: Eg. chatserver.mydomain.com

Resources:

    MyLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          ImageId: !Ref AMI
          InstanceType: !Ref InstanceType



    MyAutoscalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          AvailabilityZones: !GetAZs ''
          LaunchConfigurationName: !Ref MyLaunchConfig
          MinSize: 1
          MaxSize: 6
          DesiredCapacity: !Ref AutoscaleInstances

    AutoscaleToRoute53Role:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Principal: {Service: [lambda.amazonaws.com]}
              Action: ['sts:AssumeRole']
          Path: /
          ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          Policies:
          - PolicyName: S3Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Sid: AccessToEC2andRoute53
                  Action:
                    - 'EC2:*'
                    - 'autoscaling:*'
                    - 'route53:*'
                  Resource: '*'



    AutoscaleToRoute53Function:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: webproxy-to-route53
            MemorySize: 128
            Handler: index.handler
            Role: !GetAtt AutoscaleToRoute53Role.Arn
            Runtime: nodejs4.3
            Timeout: 300
            Environment:
                Variables:
                    group_name: !Ref MyAutoscalingGroup
                    zone_id: !Ref Route53Zone
                    fqdn: !Ref FQDN
            Code:
                ZipFile:
                    |
                    console.log('Loading function');
                    var AWS = require('aws-sdk');
                    var autoscaling = new AWS.AutoScaling();
                    var ec2 = new AWS.EC2( { apiVersion: '2016-11-15'});
                    var route53 = new AWS.Route53();
                    exports.handler = function(event, context) {
                        var params = {
                            AutoScalingGroupNames: [ process.env.group_name ]
                        };
                        autoscaling.describeAutoScalingGroups(params, function(err, data) {
                            if (err)
                                return context.done(err)

                            if (!(data.AutoScalingGroups || []).length)
                                return context.done('autoscaling-group-not-found')

                            var instances = (data.AutoScalingGroups[0].Instances || []).map(function(i) { return i.InstanceId})
                            console.log(process.env.group_name, " instances ", instances )
                            if (!instances.length)
                                return context.done('autoscaling-group-no-instances');

                            ec2.describeInstances({ InstanceIds: instances, }, function(err, data) {
                                if (err)
                                    return context.done(err)

                                console.log("described instances", data.Reservations )

                                var ip_addresses = [];
                                (data.Reservations || []).map(function(R) {
                                    ;(R.Instances || []).filter(function(i) { return i.hasOwnProperty('PublicIpAddress') }).map(function(i) { ip_addresses.push( i.PublicIpAddress )})
                                });

                                console.log(ip_addresses)

                                var params = {
                                    ChangeBatch: {
                                        Changes: [
                                            {
                                                Action: "UPSERT",
                                                ResourceRecordSet: {
                                                    Name: process.env.fqdn,
                                                    ResourceRecords: ip_addresses.map(function(ip) { return {Value: ip } }),
                                                    TTL: 60,
                                                    Type: "A"
                                                }
                                            }
                                        ],
                                    },
                                    HostedZoneId: process.env.zone_id
                                };
                                 route53.changeResourceRecordSets(params, function(err, data) {
                                    if (err)
                                        return context.done(err)


                                    context.done(null, ip_addresses );
                                 });
                            });
                        })
                    };

    TaskAutoscaleToRoute53Function:
        Type: AWS::Events::Rule
        Properties:
            Description: CloudFormation
            ScheduleExpression: rate(1 minute)
            Name: task-autoscale-to-route53
            Targets:
              - Arn: !GetAtt AutoscaleToRoute53Function.Arn
                Id: TaskAutoscaleToRoute53Function
                Input: '{}'

    PermissionTaskAutoscaleToRoute53Function:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref AutoscaleToRoute53Function
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
        SourceArn: !GetAtt TaskAutoscaleToRoute53Function.Arn
