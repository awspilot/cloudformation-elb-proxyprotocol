AWSTemplateFormatVersion: 2010-09-09
Parameters:
    ClusterName:
        Type: String
        Default: testcluster

    InstanceType:
        Type: String
        Default: t2.micro
        Description: Instance Type

    AMI:
        Type: String
        Description: Select the AMI for your region from this list https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html


Resources:
    EcsCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref ClusterName


    PermissiveFirewall:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: For demo only allow all ports, used by elb and ec2 instances in ECS
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0


    EC2Role:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Statement:
            - Effect: Allow
              Principal:
                Service: [ec2.amazonaws.com]
              Action: ['sts:AssumeRole']
          Path: /
          Policies:
          - PolicyName: ecs-service
            PolicyDocument:
              Statement:
              - Effect: Allow
                Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
                  'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
                  'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
                Resource: '*'
    EC2InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        DependsOn: ['EC2Role']
        Properties:
          Path: /
          Roles: [!Ref 'EC2Role']


    LaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        DependsOn: ['PermissiveFirewall','EC2InstanceProfile']
        Properties:
          ImageId: !Ref AMI
          InstanceType: !Ref InstanceType
          UserData:
              Fn::Base64: !Sub
                  - |
                    #!/bin/bash
                    service docker stop
                    echo ECS_CLUSTER=${clustername} >> /etc/ecs/ecs.config
                    service docker start
                    start ecs
                  - {
                      clustername: !Ref ClusterName
                    }
          IamInstanceProfile: !Ref EC2InstanceProfile
          SecurityGroups:
              - !Ref PermissiveFirewall




    Autoscale:
        Type: AWS::AutoScaling::AutoScalingGroup
        DependsOn: ['LaunchConfig']
        Properties:
          AvailabilityZones: !GetAZs ''
          LaunchConfigurationName:  !Ref LaunchConfig
          MinSize: 1
          MaxSize: 2
          DesiredCapacity: 1




    EcsTask:
        Type: AWS::ECS::TaskDefinition
        Properties:
          ContainerDefinitions:
            - Name: test-elb-proxyprotocol
              Image: awspilotcom/test-elb-proxyprotocol
              Memory: 128
              Cpu: 10
              PortMappings:
                  - HostPort: 8080
                    ContainerPort: 8080
                    Protocol: tcp
                  - HostPort: 8443
                    ContainerPort: 8443
                    Protocol: tcp
              Environment:
                  - Name: HTTP_PORT
                    Value: 8080
                  - Name: HTTPS_PORT
                    Value: 8443


    ELB:
        Type: AWS::ElasticLoadBalancing::LoadBalancer
        DependsOn: ['PermissiveFirewall']
        Properties:
            LoadBalancerName: 'elb'
            AvailabilityZones: !GetAZs ''
            Listeners:
                - LoadBalancerPort: 80
                  InstancePort: 8080
                  Protocol: TCP
            SecurityGroups:
                - !GetAtt PermissiveFirewall.GroupId
            Policies:
                - PolicyName: EnableProxyProtocolPolicy
                  PolicyType: ProxyProtocolPolicyType
                  Attributes:
                  - Name: ProxyProtocol
                    Value: true
                  InstancePorts:
                  - 8080

    EcsService:
        Type: AWS::ECS::Service
        DependsOn: ['ELB','EcsCluster','EcsTask']
        Properties:
            ServiceName: 'test-service'
            Cluster:
                Ref: ClusterName
            TaskDefinition:
                Ref: EcsTask
            DesiredCount: 1
            LoadBalancers:
                - ContainerName: 'test-elb-proxyprotocol'
                  ContainerPort: 8080
                  LoadBalancerName: 'elb'
Outputs:
  WebAddress:
    Description: Information about the value
    Value: !Join [ '', [ 'http://', !GetAtt ELB.DNSName ] ]
    Export:
      Name: WebAddress
